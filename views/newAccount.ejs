<style>
    body {
        background-color: #5badeb;
    }
    #dlt {
    position: fixed;
    bottom: 80px; /* Adjust this value as needed */
    left: 50%;
    transform: translateX(-50%);
    display: block; /* Change display to block to ensure full width */
    padding: 10px 20px;
    background-color: #ff0000;
    color: white;
    border: 1px solid rgb(51, 47, 47);
    border-radius: 5px;
    cursor: pointer;
    font-size: 20px;
}
    #preferences {
        position: relative;
        top: 300px;
        left: 0px;
        padding: 20px 0;
        border: 2px solid black;
        background-color: white;
    }
    #currencyTable {
        width: 100%;
        border-collapse: collapse;
        padding: 20px;
        margin: 10px 0px;
        background-color: white;

    }
    #currencyTable th,
    #currencyTable td {
        padding: 10px;
        border: 1px solid black;
    }
    #currencyTable th {
        background-color: #f2f2f2;
    }
    /* Style the modal */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
    /* Style the modal content */
    .modal-content {
        background-color: white;
        width: 300px;
        padding: 20px;
        text-align: center;
        border-radius: 5px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    /* Style buttons */
    button {
        margin: 5px;
        padding: 5px;
    }
    .main-content {
        display: flex;
        padding-top: 80px; 
    }
    
    #favCurrency {
        padding: 20px;
        flex: 2; /* This will make the Favourite Currencies section take up available space */
        margin-right: 200px; /* Add some margin for spacing */
        margin-top: 120px; 
        float: right;

    }
 #settings {
top: 260px;
left: 355px;
position: relative;
    }
/* #username {
        position: fixed;
        left: 20px;
        bottom: 500px;
        align-self: right;
        display: contents;
    }
    #email {
        position: fixed;
        left: 20px;
        top: 150px;
    } */
    #profile h1{
        position: fixed;
        left: 20px;
        top: 80px;
        
    }
    #profile-info-container {

        position: fixed;
        right: 225px;
        top: 100px;
        padding: 20px;
        border: 2px solid black;
        background-color: rgb(161, 147, 147);
        color: white;
    }
    #profile-photo-container {
        position: fixed;
        left: 400px;
        top: 80px;
        padding: 20px;
        border: 2px solid black;
        background-color: rgb(161, 147, 147);
        color: white;
    }
    #profile-photo-container img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
    }
    </style>
    
<header><%- include('partials/header.ejs') %></header>




<div class="main-content"> 
    <div id="profile">
        <h1>Your Profile:</h1>
        <div id="profile-info-container">
        <h3 id="username">Username: <%= user.username  %></h3>
        <h3 id="email">Email: <%= user.email %></h3>
        </div>
        <div id="profile-photo-container">
        <img src="https://www.w3schools.com/howto/img_avatar.png" alt="Avatar" class="avatar">
        <button>Change Profile Photo</button>
        </div>
    </div>
    <h1 id="settings">Settings & Preferences</h1>
<form id="preferences" action="/profile" method="POST">
  
    <label for="targetCurrency">Default Target Currency:</label>
<select id="targetCurrency">
<option default value="<%= user.targetCurrency %>"><%= user.targetCurrency %></option>
   <option value="USD">USD - United States Dollar</option>
   <option value="EUR">EUR - European Dollar</option>
   <option value="AUD">AUD - Australian Dollar</option>
   <option value="CAD">CAD - Canadian Dollar</option>
   <option value="CHF">CHF - Swiss Franc</option>
   <option value="JPY">JPY - Japanese Yen</option>
   <option value="CNY">CNY - Chinese Yuan</option>
   <option value="INR">INR - Indian Rupee</option>
   <option value="BRL">BRL - Brazilian Real</option>
   <option value="MXN">MXN - Mexican Peso</option>
   
</select>

<br>
<label for="sourceCurrency">Default Source Currency:</label>
<select id="sourceCurrency">
<option default value="<%= user.sourceCurrency %>"><%= user.sourceCurrency %></option>
   <option value="USD">USD - United States Dollar</option>
   <option value="EUR">EUR - European Dollar</option>
   <option value="AUD">AUD - Australian Dollar</option>
   <option value="CAD">CAD - Canadian Dollar</option>
   <option value="CHF">CHF - Swiss Franc</option>
   <option value="JPY">JPY - Japanese Yen</option>
   <option value="CNY">CNY - Chinese Yuan</option>
   <option value="INR">INR - Indian Rupee</option>
   <option value="BRL">BRL - Brazilian Real</option>
   <option value="MXN">MXN - Mexican Peso</option>
   
</select>
<br>
<label for="decimalPlace">Decimal Place Preference:</label>
<select id="decimalPlace">
<option default value="<%= user.decimalPlaces %>"><%= user.decimalPlaces %></option>
   <option value="1">1</option>
   <option value="2">2</option>
   <option value="3">3</option>

</select>
<input type="hidden" id="userID" value="<%= user._id %>">
<button>Submit</button>
</div>
</form>


<div id="favCurrency">
    <h1>Favourite Currencies</h1>
    <table id="currencyTable">
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <tr id="noCurrenciesMessageRow">
                <td colspan="3">No favorite currencies added.</td>
            </tr>
    
        </tbody>
    </table>

    <!-- <h2>Add Currency</h2> -->
    <select id="currencySelect">
        <option value="USD">USD - US Dollar</option>
        <option value="EUR">EUR - Euro</option>
        <option value="JPY">JPY - Japanese Yen</option>
       
    </select>
    <button id="addCurrencyBtn">Add Currency</button>
</div>
    <div id="deleteConfirmationModal" class="modal">
        <div class="modal-content">
            <p>Are you sure you want to delete your account? This action cannot be undone.</p>
            <button id="confirmDelete">Yes, Delete</button>
            <button id="cancelDelete">Cancel</button>
        </div>
    </div>
    
</div>
</div> 
<button id="dlt">Delete Account</button>
</div>
<footer><%- include('partials/footer.ejs') %></footer>
<script>
const dlt = document.getElementById('dlt');
const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
const confirmDelete = document.getElementById('confirmDelete');
const cancelDelete = document.getElementById('cancelDelete');

dlt.addEventListener('click', () => {
    deleteConfirmationModal.style.display = 'block';
});

confirmDelete.addEventListener('click', async () => {
    deleteConfirmationModal.style.display = 'none';
    
    const userIDElement = document.getElementById('userID');
    const userID = userIDElement.value;
    try {
        const res = await fetch('/deleteAccount', {
            method: 'DELETE',
            body: JSON.stringify({ userID }),
            headers: { 'Content-Type': 'application/json' }
        });
        const data = await res.json();
        console.log(data);
        // isn't redirecting
        if (data.success) {
            location.assign('/register'); // Redirect to home page after successful deletion
        }
    } catch (err) {
        console.log(err);
    }
});

cancelDelete.addEventListener('click', () => {
    deleteConfirmationModal.style.display = 'none';
});
const form = document.getElementById('preferences');
form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const userIDElement = document.getElementById('userID');
    const userID = userIDElement.value;
    const targetCurrency = form.targetCurrency.value;
    const sourceCurrency = form.sourceCurrency.value;
    const decimalPlace = form.decimalPlace.value;

    try {
        const res = await fetch('/profile', {
            method: 'POST',
            body: JSON.stringify({ userID,targetCurrency, sourceCurrency, decimalPlace }),
            headers: { 'Content-Type': 'application/json' }
        });
        const data = await res.json();
        console.log(data);
        if (data.user) {
            location.assign('/profile');
        }
    }
    catch (err) {
        console.log(err);
    }
});



document.getElementById("addCurrencyBtn").addEventListener("click", function() {
    const selectedCurrency = document.getElementById("currencySelect").value;
    const userIDElement = document.getElementById('userID');
    const userID = userIDElement.value;

    // Fetch the currency name from the currencyNames object
    const currencyName = currencyNames[selectedCurrency];

    // Check for duplicates based on both currency code and name
    const existingRows = document.querySelectorAll("#currencyTable tbody tr");
    for (const row of existingRows) {
        const codeCell = row.querySelector("td:first-child");
        const nameCell = row.querySelector("td:nth-child(2)");
        if (codeCell && codeCell.textContent === selectedCurrency && nameCell && nameCell.textContent === currencyName) {
            // Currency already exists, don't add a duplicate
            return;
        }
    }

    fetch('/addCurrency', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            currencyCode: selectedCurrency,
            currencyName: currencyName, // Send the currency name to the server
            userID
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateTableWithNewCurrency(selectedCurrency, currencyName);
            fetchAndDisplayFavoriteCurrencies(); // Refresh display after adding
        } else {
            if (data.error === 'Currency is already a favorite') {
                // Display a message to the user indicating the currency is already a favorite
                alert('This currency is already a favorite.');
            } else {
                console.error(data.error);
            }
        }
    })
    .catch(error => {
        console.error('An error occurred:', error);
    });
});

// ...


function fetchAndDisplayFavoriteCurrencies() {
    fetch('/getFavouriteCurrency', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const noCurrenciesMessageRow = document.getElementById("noCurrenciesMessageRow");
        const currencyTable = document.getElementById("currencyTable");

        if (data.success) {
            const favoriteCurrencies = data.favoriteCurrencies;
            if (favoriteCurrencies.length === 0) {
                noCurrenciesMessageRow.style.display = "table-row";
            } else {
                noCurrenciesMessageRow.style.display = "none";
            }
        
            favoriteCurrencies.forEach(currency => {
                updateTableWithNewCurrency(currency.code, currency.name);
                
            });
            
        } else {
            console.error(data.error);
        }
    })
    .catch(error => {
        console.error('An error occurred:', error);
    });
}


function updateTableWithNewCurrency(selectedCurrency, currencyName) {
    const tableBody = document.querySelector("#currencyTable tbody");
    const existingRows = tableBody.querySelectorAll("tr");
       // Check for duplicates
       for (const row of existingRows) {
        const codeCell = row.querySelector("td:first-child");
        if (codeCell && codeCell.textContent === selectedCurrency) {
            // Currency already exists, don't add a duplicate
            return;
        }
    }


    const newRow = document.createElement("tr");

    const codeCell = document.createElement("td");
    codeCell.textContent = selectedCurrency;
    newRow.appendChild(codeCell);

    const nameCell = document.createElement("td");
    nameCell.textContent = currencyName;
    newRow.appendChild(nameCell);

    const actionCell = document.createElement("td");
    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "Delete";
    deleteBtn.addEventListener("click", function() {
        const clickedRow = deleteBtn.closest("tr");
        const rowIndex = clickedRow.rowIndex;

        clickedRow.remove();

        const currencyCodeToDelete = selectedCurrency;
        const userIDElement = document.getElementById('userID');
        const userID = userIDElement.value;

        fetch('/deleteCurrency', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                currencyCode: currencyCodeToDelete,
                userID
            })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                console.error(data.error);
                tableBody.insertRow(rowIndex, newRow);
            }
        })
        .catch(error => {
            console.error('An error occurred:', error);
            tableBody.insertRow(rowIndex, newRow);
        });
    });
    
    actionCell.appendChild(deleteBtn);
    newRow.appendChild(actionCell);

    tableBody.appendChild(newRow);

    fetchAndDisplayFavoriteCurrencies();
}

// Define currencyNames object
const currencyNames = {
    USD: "US Dollar",
    EUR: "Euro",
    JPY: "Japanese Yen",
    // Add more currency names as needed
};

document.addEventListener("DOMContentLoaded", fetchAndDisplayFavoriteCurrencies);

</script>