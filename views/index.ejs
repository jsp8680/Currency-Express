<!DOCTYPE html>
<html>
  <head>
    <title>Currency Converter</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device, initial-scale=1.0" />
    <link rel="stylesheet" href="styles.css" />
  </head>
  <header><%- include('partials/header.ejs') %></header>

  <body>
    <h2>Currency Converter</h2>
    <div>
      <h3>Amount</h3>
      <span class="currency-symbol">$</span>
      <input id="amount" min="0" type="number" />
    </div>
    <div>
      <h4>From</h4>

      <% if(user){ %>
        <!-- allows the js to easily grab the decimal when a user is logged in -->
      <h5 id="decimal" hidden><%= user.decimalPlaces %></h5>
      <% } else { %>
      <h5 id="decimal" hidden>2</h5>
      <% } %> <% if (user) { %>

      <select class="currency-select" id="currencyFrom">
        <!-- shows the fav. currencies at the top with the default source currency being the default -->
        <% user.sortedCurrencies.forEach(currency => { %>
          <option value="<%= currency.code %>"
            <% if (user.sourceCurrency === currency.code) { %>
              selected default
            <% } %>
          ><%= currency.code %> - <%= currency.name %></option>
        <% }); %>
      </select>
    </div>
  <!-- shows the currency To when  a user isn't logged in -->
    <% } else { %> 
  
    <select class="currency-select" id="currencyFrom">
      <option hidden value="USD" default>
        USD - United States Dollar
      </option>
      <option value="CAD">CAD - Canadian Dollar</option>
      <option value="USD">USD - United States Dollar</option>
      <option value="EUR">EUR - European Dollar</option>
      <option value="AUD">AUD - Australian Dollar</option>
      <option value="CHF">CHF - Swiss Franc</option>
      <option value="JPY">JPY - Japanese Yen</option>
      <option value="CNY">CNY - Chinese Yuan</option>
      <option value="INR">INR - Indian Rupee</option>
      <option value="BRL">BRL - Brazilian Real</option>
      <option value="MXN">MXN - Mexican Peso</option>
      <option value="SGD">SGD - Singapore Dollar</option>
      <option value="HKD">HKD - Hong Kong Dollar</option>
    </select>
  </div>
      <% } %>
    <span id="arrows"> ⇆ </span>
    <% if (user) { %>
    <div>
      <h5>To</h5>
       <!-- shows the fav. currencies at the top with the default source currency being the default -->
      <select class="currency-select" id="currencyTo">
        <% user.sortedCurrencies.forEach(currency => { %>
          <option value="<%= currency.code %>"
            <% if (user.targetCurrency === currency.code) { %>
              selected
            <% } %>
          ><%= currency.code %> - <%= currency.name %></option>
        <% }); %>
      </select>
    </div>
  <!-- shows the currency To when  a user isn't logged in -->
    <% } else { %> 
      <div>
        <h5>To</h5>
        <select class="currency-select" id="currencyTo">
          <option hidden value="CAD" default>
            CAD - Canadian Dollar
          </option>
          <option value="CAD">CAD - Canadian Dollar</option>
          <option value="USD">USD - United States Dollar</option>
          <option value="EUR">EUR - European Dollar</option>
          <option value="AUD">AUD - Australian Dollar</option>
          <option value="CHF">CHF - Swiss Franc</option>
          <option value="JPY">JPY - Japanese Yen</option>
          <option value="CNY">CNY - Chinese Yuan</option>
          <option value="INR">INR - Indian Rupee</option>
          <option value="BRL">BRL - Brazilian Real</option>
          <option value="MXN">MXN - Mexican Peso</option>
          <option value="SGD">SGD - Singapore Dollar</option>
          <option value="HKD">HKD - Hong Kong Dollar</option>
        </select>
      </div>
      <% } %>
    <div>
      <button id="convertButton">Convert</button>
    </div>

    <div>
      <input id="previous" type="text" />
    </div>
    <span id="equals"> = </span>

    <div>
      <input id="prior" type="text" />
    </div>
    <div id="error"></div>
    <div id="result"></div>

    <button class="btn help" href="/faqs">Need Help?</button>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Get references to the DOM elements
        const convertButton = document.getElementById("convertButton");
        const amountInput = document.getElementById("amount");
        const fromSelect = document.getElementById("currencyFrom");
        const toSelect = document.getElementById("currencyTo");
        const previousInput = document.getElementById("previous");
        const priorInput = document.getElementById("prior");
        const error = document.getElementById("error");
        const decimal = document.getElementById("decimal");
        const decimalPlaces = decimal.textContent;
        console.log(decimalPlaces);
        const currencySymbol = document.querySelector(".currency-symbol");
        // Disable the input fields
        previousInput.disabled = true;
        priorInput.disabled = true;

        const currencySymbols = {
   CAD: "\u0024", // Dollar sign: $
   USD: "\u0024", // Dollar sign: $
   EUR: "\u20AC", // Euro sign: €
   AUD: "\u0024", // Dollar sign: $
   CHF: "\u0043\u0048\u0046",
   JPY: "\u00A5", // Yen sign: ¥
   CNY: "\u00A5",
   INR: "\u20B9",
   BRL: "\u20A2",
   MXN: "\u0024",
   SGD: "\u0053\u0024", //
   HKD: "\u0024",
};


        const updateCurrencySymbol = () => {
          const selectedCurrency = fromSelect.value;
          currencySymbol.textContent = currencySymbols[selectedCurrency];
        };

        fromSelect.addEventListener("change", updateCurrencySymbol);
        updateCurrencySymbol(); // Initial currency symbol update

        // Attach a click event listener to the Convert button
        convertButton.addEventListener("click", async () => {
          const fromCurrency = fromSelect.value;
          const toCurrency = toSelect.value;
          const amount = parseFloat(amountInput.value); // Parse the amount to a number

          try {
            // Fetch the exchange rate data from API
            const response = await fetch(
              `https://v6.exchangerate-api.com/v6/52a3c3c7704171311bbfd9a6/latest/${fromCurrency}`
            );
            if (!response.ok) {
              throw new Error("Failed to fetch exchange rate data");
              error.textContent = "Failed to fetch exchange rate data";
            }

            const data = await response.json();
            const rate = data.conversion_rates[toCurrency];
            if (!rate) {
              throw new Error("Invalid target currency");
            }

            // Calculate the converted amount

            const convertedAmount = (amount * rate).toFixed(decimalPlaces);

            // Update the input fields with conversion results
            previousInput.value =
              fromCurrency + " " + amount.toFixed(decimalPlaces);
            priorInput.value = toCurrency + " " + convertedAmount;
          } catch (error) {
            // Handle errors and display a message
            error.textContent = "An error occurred during conversion.";
            console.error(error);
          }
        });

        const flipArrows = document.getElementById("arrows");
        flipArrows.addEventListener("click", () => {
          const tempValue = fromSelect.value;
          fromSelect.value = toSelect.value;
          toSelect.value = tempValue;
          updateCurrencySymbol(); // Update's the currency symbol after flipping
        });

        amountInput.addEventListener("input", () => {
          currencySymbol.style.visibility = "visible"; // Show the currency symbol
          currencySymbol.style.opacity = "1"; // Make it fully visible
        });

        amountInput.addEventListener("focus", () => {
          currencySymbol.style.visibility = "visible"; // Show's the currency symbol
          currencySymbol.style.opacity = "1"; // Make it fully visible
        });
      });
    </script>
  </body>
  <footer><%- include('partials/footer.ejs') %></footer>
</html>
